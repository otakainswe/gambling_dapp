pragma solidity >=0.4.0 <=0.6.0;

contract thirdBet {
   
    //uint betAmount = 20;
    // check how to give etherium to contract and how to give it away
   
    address payable owner;
   
    enum Phases { Commit, Reveal }
    Phases phase = Phases.Commit;
   
    struct Commit{
        bytes32 hashedSeeds;
        uint guess;
        bool voted;
        bool revealed;
        bool winner;
        bool hasWithdrawed;
    }
    mapping(address => Commit) public commits;
   
    uint participantCount = 0;
    uint winnerCount = 0;
    uint jackpot = 0;
    uint[] clearSeeds;
    address[] participants;
    uint random = 0;
    
    constructor() payable public {
        owner = msg.sender;
    }
   
    function commit(bytes32  _hashedSeed, uint _guess) public payable {
        require(phase == Phases.Commit, "only available in commit phase");
        require(commits[msg.sender].voted == false, "You can only vote once!");
        require(_guess < 7 && _guess > 0, "invalid guess!");
        require(msg.value > 0, "Value need to be > 0 !!");
       
        // We got an error from this require part, so I just commented out this line.
        // require(msg.value == 1 ether, "gambling amount set to 1 ether for now");
       
        jackpot += msg.value;
        commits[msg.sender].hashedSeeds = _hashedSeed;
        commits[msg.sender].guess = _guess;
        commits[msg.sender].voted = true;
        participantCount++;
        participants.push(msg.sender);
    }
   
    function testKeccak(uint _toHash) public pure returns (bytes32 _hash) {
        _hash = keccak256(abi.encodePacked(_toHash));
    }
   
    function triggerRevealPhase() public {
        require(owner == msg.sender);
       
        phase = Phases.Reveal;
    }
   
    function reveal(uint _clearSeed) public {
        require(phase == Phases.Reveal, "only available in reveal phase");
        require(commits[msg.sender].voted == true, "You did not participate in the commit phase!");
        require(commits[msg.sender].revealed == false, "You can only reveal unrevealed commmit.");
       
        if(commits[msg.sender].hashedSeeds == keccak256(abi.encodePacked(_clearSeed)))
            clearSeeds.push(_clearSeed);
        else
            abort();
         
        if(clearSeeds.length == participantCount)
            triggerGame();
            //notify();
       
    }
   
    function triggerGame() private {
        uint _random = PRNG();
        for (uint i=0; i<participants.length; i++) {
            if(commits[participants[i]].guess == _random) {
                commits[participants[i]].winner = true;
                winnerCount++;
            }
        }  
    }
   
    function withdrawlWin() public payable {
        require(commits[msg.sender].winner == true, "You did not win!");
        require(address(this).balance > 0);
        msg.sender.transfer(address(this).balance);
    }
    
    function getBalance() public view returns (uint256) {
        return address(this).balance;
    }
    
    function PRNG() private returns (uint) {
       uint _random = (uint(keccak256(abi.encodePacked(clearSeeds))) % 6) + 1;
       random = _random;
       return 2;
    }
    
    function abort() private {
        delete clearSeeds;
        for (uint i=0; i<participants.length; i++) {
            delete commits[participants[i]];
        }  
        delete participants; //This is the array used to store user address
        participantCount = 0;
        jackpot = 0; 
        phase = Phases.Commit;
    }
}

	
	
	

